# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

Set-StrictMode -Version latest
$ErrorAction = "Stop"


<#
.SYNOPSIS
    Modify the list of configured tasks.
    
.DESCRIPTIONS
    Reads the list of configured ConEmu tasks from the windows registry and
    applies a custom configuration action. 
    
    The modified tasks are then sorted as such: 1) current id 2) _SortKey 
    configuration option 3) Name. Afterwards the tasks are assigned a new 
    sequential id ("Task1", "Task2", ...). The tasks are then written back to 
    the registry.
    
.PARAMETER Action
    A custom configuration action. It is passed the current configuration as
    pipeline variable $_. A default id for autogenerated configurations is
    available as $autoId.
    
    The configuration is represented as a dictionary, where the key is the
    name of a configuration. The value consists of two keys: 
        "Id"     : This is the Id assigned to the current ConEmu task
                   ("Task1", "Task2", ...). If no id has been specified, it is
                   assumed to be $autoId.
        "Config" : The registry values belonging to the current ConEmu task
                   configuration.
    
.PARAMETER SortMode
    OPTIONAL - By default the order of existing tasks without _SortKey 
    specified is preserved (SortMode = SortKeyFirst). Tasks with a _SortKey
    specified are sorted by 1) _SortKey 2) Name and come before tasks without
    _SortKey.
    
    Note: "the order of exisiting tasks is preserved" means that the list of
    all tasks is sorted by there Id first. However, the Id can be changed via
    the configuration Action. Tasks without Id (newly added tasks) and possibly
    also tasks defining a _SortKey (depending on the sort mode) are assigned a
    special $autoId (see Action). This $autoId is chosen such that (depending 
    on the sort mode) these tasks come before or after tasks with an explicit 
    Id.
    
    Other options are:
        Name:
            Reorder tasks by name (alphabetically ascending).
        Preserve:
            See PreserveOrPrependBySortKey:
        PreserveOrPrependBySortKey:
            The order of existing tasks (with or without _SortKey) is preserved.
            New tasks are prepended and sorted by 1) _SortKey 2) Name.
        PreserveOrAppendBySortKey:
            The order of existing tasks (with or without _SortKey) is preserved.
            New tasks are appended and sorted by 1) _SortKey 2) Name.
        PreserveOrPrependByName:
            The order of existing tasks (with or without _SortKey) is preserved.
            New tasks are prepended and sorted by their Name.
        PreserveOrAppendByName:
            The order of existing tasks (with or without _SortKey) is preserved.
            New tasks are appended and sorted by their Name.
        SortKeyFirst:
            See SortKeyFirstPreserveOthers
        SortKeyFirstPreserveOthers:
            The order of existing tasks without _SortKey is preserved. New tasks
            and tasks with _SortKey are prepended and sorted by 1) _SortKey 
            2) Name.
        SortKeyLast:
            See SortKeyLastPreserveOthers
        SortKeyLastPreserveOthers:
            The order of existing tasks without _SortKey is preserved. New tasks
            and tasks with _SortKey are appended and sorted by 1) _SortKey 
            2) Name.
        SortKeyFirstAndName:
            All tasks are sorted by 1) _SortKey 2) Name. Tasks without _SortKey
            come last.
        SortKeyLastAndName:
            All tasks are sorted by 1) _SortKey 2) Name. Tasks without _SortKey
            come first.
    
.PARAMETER OnlyCurrentUser
    OPTIONAL - Apply configuration to current user only. By default it is
    applied to all local user profiles.
    
.OUTPUT
    None.
#>
function _Update-TaskConfigurationImpl {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory=$true)]
        [ScriptBlock] $Action,
               
        [Parameter(Mandatory=$false)]
        [ValidateSet("Name", "Preserve", "PreserveOrPrependBySortKey",
                "PreserveOrAppendBySortKey", "PreserveOrPrependByName",
                "PreserveOrAppendByName", "SortKeyFirst",
                "SortKeyFirstPreserveOthers", "SortKeyLast", 
                "SortKeyLastPreserveOthers", "SortKeyFirstAndName",
                "SortKeyLastAndName")]
        [String] $SortMode = "SortKeyFirstPreserveOthers",
        
        [Parameter(Mandatory=$false)]
        [Switch] $OnlyCurrentUser = $false
    )
    
    function _doit() {
        $tasksPath = "$hkuPath\SOFTWARE\ConEmu\.Vanilla\Tasks"
        
        $tasksByName = @{}
        $tasksImage  = Export-Registry -Path $tasksPath `
                -Relative -Recurse -Filter "Task**" `
                -ErrorAction SilentlyContinue | `
            ConvertTo-NestedRegistryImage
         
        
        ForEach ($item in $tasksImage.GetEnumerator()) {
            $id = $item.Key
            If ($item.Value[$sortKey]) {
                $id = $autoId
            }
        
            $tasksByName[$item.Value.Name] = @{
                Id     = $id
                Config = $item.Value
            }
        }  
        
        # Apply action hook
        $_ = $tasksByName
        & $Action
               
        $tasksImage = [System.Collections.Specialized.OrderedDictionary]::new()
        
        # See SetCmdTask.h for a list of supported flags
        # https://github.com/Maximus5/ConEmu/blob/v16.09.14/src/ConEmu/SetCmdTask.h#L33-L43
        $defaultTaskFlag   = 0x0001
        $defaultShellFlag  = 0x0002
        $defaultTaskName   = $null
        $defaultShellName  = $null
        
        # Sort tasks by 1a) current order / Id (user defined tasks) 1b) sort key
        # (tasks installed with this chocolatey extension) 2) task name
        $curId = 0;
        $tasksByName.Values | Sort-Object -Property $sortExpression | %{
                $curId++
                
                # Clone configuration because it is going to modifed later and
                # the config might have external references (when added by the
                # update action).
                $config = [Hashtable]::new($_.Config)
                
                # Ensure that there's only one default task/shell selected
                If (($config.Flags -band $defaultTaskFlag) `
                        -eq $defaultTaskFlag) {
                    If ($defaultTaskName) {
                        Write-Warning ( `
                            "Omiting default task flag from task " + `
                            "'$($config.Name)': There can be only one task " + `
                            "selected as default for new consoles and " ` +
                            "'$defaultTaskName' has already been chosen as " + `
                            "default.")
                        $config.Flags = `
                            $config.Flags -band -bnot $defaultTaskFlag
                    } Else {
                        $defaultTaskName = $config.Name
                        Write-Verbose "Found default task: $defaultTaskName"
                    }
                }
                If (($config.Flags -band $defaultShellFlag) `
                        -eq $defaultShellFlag) {
                    If ($defaultShellName) {
                        Write-Warning ( `
                            "Omiting default shell flag from task " + `
                            "'$($config.Name)': There can be only one task " + `
                            "selected as default shell and " ` +
                            "'$defaultTaskName' has already been chosen as " + `
                            "default.")
                        $config.Flags = `
                            $config.Flags -band -bnot $defaultShellFlag
                    } Else {
                        $defaultShellName = $config.Name
                        Write-Verbose "Found default shell: $defaultShellName"
                    }
                }
                
                $tasksImage["Task$curId"] = $config
            }
        $tasksImage['Count'] = $curId

        # Cleanup existing task entries
        Get-ChildItem $tasksPath | %{
                If ($_.Name -match "Task\d+$") {
                    $_.PSPath 
                }
            } | Remove-Item
        
        # Write back updated task configuration
        $tasksImage | Import-Registry -ParentKey $tasksPath -Force | Out-Null
    }
    
    
    # Configure sort order
    $sortKey   = "_SortKey"
    
    # U+10FFFF = 0xdbffdfff is the highest UTF-16 code point
    # see also https://en.wikipedia.org/wiki/UTF-16
    $sortLast  = "$([char]0xdbff)$([char]0xdfff)"
    $sortFirst = ""
    
    $autoId  = $sortFirst
    If ($SortMode -match "(.*Append.*)|(.*Last.*)") {
        # U+10FFFF = 0xdbffdfff is the highest UTF-16 code point
        # see also https://en.wikipedia.org/wiki/UTF-16
        $autoId = $sortLast
    }
    
    $sortExpression = @()
    If ($SortMode -eq "Name") {
        $sortExpression += @{ Expression = { $_.Config.Name } }
    } Else {
        If ($SortMode -match "Preserve.*") {
            $sortExpression += @{
                Expression = {
                    If ($_.Contains("Id")) {
                        return $_.Id 
                    } Else {
                        return $autoId 
                    } 
                } 
            }
        } ElseIf ($SortMode -match "^SortKey(First|Last)(AndPreserveOthers)?$") {
            $sortExpression += @{
                Expression = {
                    If ($_.Contains("Id") -and `
                            -not $_.Config.Contains($sortKey)) {
                        return $_.Id 
                    } Else {
                        return $autoId 
                    } 
                } 
            }
        } 
        
        If ($SortMode -match "^SortKey(First|Last)AndName$") {
            $defaultSortKey = $sortLast
            If ($SortMode -match ".*Last.*") {
                $defaultSortKey = $sortFirst
            }
            
            $sortExpression += @{
                Expression = {
                    If ($_.Config.Contains($sortKey)) {
                        return $_.Config[$sortKey]
                    } Else {
                        return $defaultSortKey
                    }
                } 
            }
            
            $sortExpression += @{ Expression = { $_.Config.Name } }
        } Else {
            If (-not ($SortMode `
                    -match "^PreserveOr(Prepend|Append)ByName$")) {
                $sortExpression += @{ Expression = { $_.Config[$sortKey] } }
            }
            
            $sortExpression += @{ Expression = { $_.Config.Name } }
        }
    }
    
    
    # Apply configuration action
    If ($OnlyCurrentUser) {
        $hkuPath = "Registry::HKEY_CURRENT_USER"
        _doit
    } Else {
        Edit-AllLocalUserProfileHives -Action { _doit }
    }
}